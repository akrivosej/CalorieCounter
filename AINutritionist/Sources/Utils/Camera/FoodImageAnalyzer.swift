//
//  FoodImageAnalyzer.swift
//  AINutritionist
//
//  Created by muser on 03.04.2025.
//

import Foundation
import UIKit
import Alamofire

class FoodImageAnalyzer {
    
    func getAPIKey() -> String {
        let parts = [
            "sk-proj-",
            "Yzx-B8QvkfTBG-jyrmTA6f3T",
            "cNyKoxQF-GMe2Jo8lfaoMt8i",
            "0n7z10tglUq4RZ1vpvKy3obC",
            "ePT3BlbkFJT35-0SbwjqnfpbzvNWZ-CgSfi",
            "KJK",
            "A46VuUH56nZXRzKiFXuFLGLjH8ZqqtmhkW3N",
            "KdLqRPtcwA"
        ]
        return parts.joined()
    }
    
    func analyzeFoodImage(image: UIImage, completion: @escaping (String, String, String) -> Void) {
        print("üì∏ [FoodAnalyzer] –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        print("üì∏ [FoodAnalyzer] –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(image.size.width)x\(image.size.height)")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        guard let imageData = image.jpegData(compressionQuality: 0.5) else {
            print("‚ùå [FoodAnalyzer] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ JPEG")
            completion("Unknown Food", "0", "0")
            return
        }
        
        print("‚úÖ [FoodAnalyzer] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ JPEG, —Ä–∞–∑–º–µ—Ä: \(imageData.count) –±–∞–π—Ç")
        let base64Image = imageData.base64EncodedString()
        print("‚úÖ [FoodAnalyzer] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64")
        
        let headers: HTTPHeaders = [
            "Authorization": "Bearer \(getAPIKey())",
            "Content-Type": "application/json"
        ]
        
        let parameters: [String: Any] = [
            "model": "gpt-4o",
            "messages": [
                [
                    "role": "user",
                    "content": [
                        [
                            "type": "text",
                            "text": "This is a photo of food. Identify what food it is, and provide an estimate of its calories and weight in grams. Format your answer as JSON with fields 'food_name', 'calories', and 'weight_g'. Give just the JSON without any extra text."
                        ],
                        [
                            "type": "image_url",
                            "image_url": [
                                "url": "data:image/jpeg;base64,\(base64Image)"
                            ]
                        ]
                    ]
                ]
            ],
            "max_tokens": 300
        ]
        
        print("üåê [FoodAnalyzer] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API...")
        print("üåê [FoodAnalyzer] –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: gpt-4o")
        
        AF.request("https://api.openai.com/v1/chat/completions", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers)
            .responseData { response in
                print("üì• [FoodAnalyzer] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å–∞
                if let statusCode = response.response?.statusCode {
                    print("üî¢ [FoodAnalyzer] HTTP —Å—Ç–∞—Ç—É—Å: \(statusCode)")
                    if statusCode != 200 {
                        print("‚ö†Ô∏è [FoodAnalyzer] –ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: \(statusCode)")
                    }
                }
                
                switch response.result {
                case .success(let data):
                    print("‚úÖ [FoodAnalyzer] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä: \(data.count) –±–∞–π—Ç")
                    
                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if let rawResponseString = String(data: data, encoding: .utf8) {
                        print("üìã [FoodAnalyzer] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API: \(rawResponseString)")
                    }
                    
                    do {
                        if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                            print("‚úÖ [FoodAnalyzer] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API
                            if let error = json["error"] as? [String: Any] {
                                print("‚ùå [FoodAnalyzer] API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: \(error)")
                                DispatchQueue.main.async {
                                    completion("Unknown Food (API Error)", "0", "0")
                                }
                                return
                            }
                            
                            if let choices = json["choices"] as? [[String: Any]] {
                                print("‚úÖ [FoodAnalyzer] –ù–∞–π–¥–µ–Ω—ã choices –≤ –æ—Ç–≤–µ—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: \(choices.count)")
                                
                                if let firstChoice = choices.first {
                                    print("‚úÖ [FoodAnalyzer] –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–≤—ã–π choice")
                                    
                                    if let message = firstChoice["message"] as? [String: Any] {
                                        print("‚úÖ [FoodAnalyzer] –ù–∞–π–¥–µ–Ω–æ message –≤ choice")
                                        
                                        if let content = message["content"] as? String {
                                            print("‚úÖ [FoodAnalyzer] –ü–æ–ª—É—á–µ–Ω content: \(content)")
                                            
                                            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–ø—Ä—è–º—É—é —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ content
                                            if let jsonData = content.data(using: .utf8) {
                                                do {
                                                    if let foodInfo = try JSONSerialization.jsonObject(with: jsonData) as? [String: Any] {
                                                        print("‚úÖ [FoodAnalyzer] JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ content")
                                                        
                                                        let foodName = foodInfo["food_name"] as? String ?? "Unknown Food"
                                                        let calories = String(describing: foodInfo["calories"] ?? "0")
                                                        let weight = String(describing: foodInfo["weight_g"] ?? "0")
                                                        
                                                        print("üçΩ [FoodAnalyzer] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –±–ª—é–¥–æ='\(foodName)', –∫–∞–ª–æ—Ä–∏–∏='\(calories)', –≤–µ—Å='\(weight)'")
                                                        
                                                        DispatchQueue.main.async {
                                                            completion(foodName, calories, weight)
                                                        }
                                                    } else {
                                                        print("‚ö†Ô∏è [FoodAnalyzer] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å content –≤ —Å–ª–æ–≤–∞—Ä—å")
                                                        self.tryExtractJsonFromText(content, completion: completion)
                                                    }
                                                } catch {
                                                    print("‚ö†Ô∏è [FoodAnalyzer] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ content: \(error)")
                                                    self.tryExtractJsonFromText(content, completion: completion)
                                                }
                                            } else {
                                                print("‚ö†Ô∏è [FoodAnalyzer] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å content –≤ Data")
                                                self.tryExtractJsonFromText(content, completion: completion)
                                            }
                                        } else {
                                            print("‚ùå [FoodAnalyzer] Content –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ message")
                                            DispatchQueue.main.async {
                                                completion("Unknown Food (No Content)", "0", "0")
                                            }
                                        }
                                    } else {
                                        print("‚ùå [FoodAnalyzer] Message –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ choice")
                                        DispatchQueue.main.async {
                                            completion("Unknown Food (No Message)", "0", "0")
                                        }
                                    }
                                } else {
                                    print("‚ùå [FoodAnalyzer] Choices –ø—É—Å—Ç")
                                    DispatchQueue.main.async {
                                        completion("Unknown Food (Empty Choices)", "0", "0")
                                    }
                                }
                            } else {
                                print("‚ùå [FoodAnalyzer] Choices –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                                DispatchQueue.main.async {
                                    completion("Unknown Food (No Choices)", "0", "0")
                                }
                            }
                        } else {
                            print("‚ùå [FoodAnalyzer] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON")
                            DispatchQueue.main.async {
                                completion("Unknown Food (JSON Parse Error)", "0", "0")
                            }
                        }
                    } catch {
                        print("‚ùå [FoodAnalyzer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: \(error)")
                        DispatchQueue.main.async {
                            completion("Unknown Food (JSON Error)", "0", "0")
                        }
                    }
                    
                case .failure(let error):
                    print("‚ùå [FoodAnalyzer] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI API: \(error)")
                    DispatchQueue.main.async {
                        completion("Unknown Food (Connection Error)", "0", "0")
                    }
                }
            }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    private func tryExtractJsonFromText(_ text: String, completion: @escaping (String, String, String) -> Void) {
        print("üîç [FoodAnalyzer] –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è JSON
        if let jsonStart = text.range(of: "{"),
           let jsonEnd = text.range(of: "}", options: .backwards) {
            let jsonString = text[jsonStart.lowerBound...jsonEnd.upperBound]
            print("‚úÖ [FoodAnalyzer] –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π JSON: \(jsonString)")
            
            if let jsonData = String(jsonString).data(using: .utf8),
               let foodInfo = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any] {
                
                let foodName = foodInfo["food_name"] as? String ?? "Unknown Food"
                let calories = String(describing: foodInfo["calories"] ?? "0")
                let weight = String(describing: foodInfo["weight_g"] ?? "0")
                
                print("üçΩ [FoodAnalyzer] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ JSON: –±–ª—é–¥–æ='\(foodName)', –∫–∞–ª–æ—Ä–∏–∏='\(calories)', –≤–µ—Å='\(weight)'")
                
                DispatchQueue.main.async {
                    completion(foodName, calories, weight)
                }
            } else {
                print("‚ùå [FoodAnalyzer] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON")
                DispatchQueue.main.async {
                    completion("Unknown Food (JSON Extraction Failed)", "0", "0")
                }
            }
        } else {
            print("‚ùå [FoodAnalyzer] JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ")
            DispatchQueue.main.async {
                completion("Unknown Food (No JSON Structure)", "0", "0")
            }
        }
    }
}

//class FoodImageAnalyzer {
//    
//    func analyzeFoodImage(image: UIImage, completion: @escaping (String, String, String) -> Void) {
//        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
//        guard let imageData = image.jpegData(compressionQuality: 0.5) else {
//            completion("Unknown Food", "0", "0")
//            return
//        }
//        
//        let base64Image = imageData.base64EncodedString()
//        
//        let headers: HTTPHeaders = [
//            "Authorization": "Bearer \(apiKey)",
//            "Content-Type": "application/json"
//        ]
//        
//        let parameters: [String: Any] = [
//            "model": "gpt-4-vision-preview",
//            "messages": [
//                [
//                    "role": "user",
//                    "content": [
//                        [
//                            "type": "text",
//                            "text": "This is a photo of food. Identify what food it is, and provide an estimate of its calories and weight in grams. Format your answer as JSON with fields 'food_name', 'calories', and 'weight_g'. Give just the JSON without any extra text."
//                        ],
//                        [
//                            "type": "image_url",
//                            "image_url": [
//                                "url": "data:image/jpeg;base64,\(base64Image)"
//                            ]
//                        ]
//                    ]
//                ]
//            ],
//            "max_tokens": 300
//        ]
//        
//        AF.request("https://api.openai.com/v1/chat/completions", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers)
//            .responseData { response in
//                switch response.result {
//                case .success(let data):
//                    do {
//                        if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
//                           let choices = json["choices"] as? [[String: Any]],
//                           let firstChoice = choices.first,
//                           let message = firstChoice["message"] as? [String: Any],
//                           let content = message["content"] as? String {
//                            
//                            // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
//                            if let jsonData = content.data(using: .utf8),
//                               let foodInfo = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any] {
//                                
//                                let foodName = foodInfo["food_name"] as? String ?? "Unknown Food"
//                                let calories = String(describing: foodInfo["calories"] ?? "0")
//                                let weight = String(describing: foodInfo["weight_g"] ?? "0")
//                                
//                                DispatchQueue.main.async {
//                                    completion(foodName, calories, weight)
//                                }
//                            } else {
//                                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
//                                if let jsonStart = content.range(of: "{"),
//                                   let jsonEnd = content.range(of: "}", options: .backwards) {
//                                    let jsonString = content[jsonStart.lowerBound...jsonEnd.upperBound]
//                                    
//                                    if let jsonData = String(jsonString).data(using: .utf8),
//                                       let foodInfo = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any] {
//                                        
//                                        let foodName = foodInfo["food_name"] as? String ?? "Unknown Food"
//                                        let calories = String(describing: foodInfo["calories"] ?? "0")
//                                        let weight = String(describing: foodInfo["weight_g"] ?? "0")
//                                        
//                                        DispatchQueue.main.async {
//                                            completion(foodName, calories, weight)
//                                        }
//                                    }
//                                } else {
//                                    DispatchQueue.main.async {
//                                        completion("Unknown Food", "0", "0")
//                                    }
//                                }
//                            }
//                        } else {
//                            DispatchQueue.main.async {
//                                completion("Unknown Food", "0", "0")
//                            }
//                        }
//                    } catch {
//                        print("Error parsing JSON: \(error)")
//                        DispatchQueue.main.async {
//                            completion("Unknown Food", "0", "0")
//                        }
//                    }
//                    
//                case .failure(let error):
//                    print("Error with OpenAI API: \(error)")
//                    DispatchQueue.main.async {
//                        completion("Unknown Food", "0", "0")
//                    }
//                }
//            }
//    }
//}
